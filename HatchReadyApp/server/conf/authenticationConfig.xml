<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<tns:loginConfiguration xmlns:tns="http://www.worklight.com/auth/config" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

		<!-- Licensed Materials - Property of IBM
			 5725-I43 (C) Copyright IBM Corp. 2006, 2013. All Rights Reserved.
			 US Government Users Restricted Rights - Use, duplication or
             disclosure restricted by GSA ADP Schedule Contract with IBM Corp. -->	

	 <staticResources>
	 <!--  
	   		<resource id="logUploadServlet" securityTest="LogUploadServlet">
			<urlPatterns>/apps/services/loguploader*</urlPatterns>
		</resource>
		-->
		<resource id="subscribeServlet" securityTest="SubscribeServlet">
			<urlPatterns>/subscribeSMS*;/receiveSMS*;/ussd*</urlPatterns>
		</resource>
		
	</staticResources> 

   <!--  Sample security tests  
         Even if not used there will be some default webSecurityTest and mobileSecurityTest 
         
		 Attention: If you are adding an app authenticity realm to a security test, 
		 you must also update the application-descriptor.xml. Please refer to the user documentation 
		 on application authenticity for environment specific guidelines. -->   
         
	 <securityTests>
       	<!-- 
		<mobileSecurityTest name="mobileTests">
			<testAppAuthenticity/> 
			<testDeviceId provisioningType="none" />
			<testUser realm="myMobileLoginForm" />
			<testDirectUpdate mode="perSession" />
		</mobileSecurityTest>

		<webSecurityTest name="webTests">
			<testUser realm="myWebLoginForm"/>
		</webSecurityTest>

		<customSecurityTest name="customTests">
        	<test realm="wl_antiXSRFRealm" step="1"/>
        	<test realm="wl_authenticityRealm" step="1"/>
        	<test realm="wl_remoteDisableRealm" step="1"/>
        	<test realm="wl_directUpdateRealm" mode="perSession" step="1"/>
            <test realm="wl_anonymousUserRealm" isInternalUserID="true" step="1"/>
			<test realm="wl_deviceNoProvisioningRealm" isInternalDeviceID="true" step="2"/>
       	</customSecurityTest>
       	
       	<customSecurityTest name="LogUploadServlet">
            <test realm="wl_anonymousUserRealm" step="1"/>
  	        <test realm="LogUploadServlet" isInternalUserID="true"/>
       	</customSecurityTest>
       	-->
       	<customSecurityTest name="SubscribeServlet">
       		<test isInternalUserID="true" realm="SubscribeServlet"/>
       	</customSecurityTest>    
       	<customSecurityTest name="ReadyAppHatch-securityTest">
			<test isInternalUserID="true" realm="ReadyAppHatchAuthRealm"/>
		</customSecurityTest>		

	</securityTests> 
	
	<realms>
		<realm loginModule="StrongDummy" name="SampleAppRealm">
			<className>com.worklight.core.auth.ext.FormBasedAuthenticator</className>
		</realm>
		
		<realm loginModule="rejectAll" name="SubscribeServlet">
			<className>com.worklight.core.auth.ext.HeaderAuthenticator</className>			
		</realm>
		
		<realm loginModule="AuthLoginModule" name="ReadyAppHatchAuthRealm">
			<className>com.worklight.integration.auth.AdapterAuthenticator</className>
			<parameter name="login-function" value="SBBAdapter.onAuthRequired"/>
			<parameter name="logout-function" value="SBBAdapter.onLogout"/>
		</realm>
		
		<!-- For client logger -->
		<!-- <realm name="LogUploadServlet" loginModule="StrongDummy">
			<className>com.worklight.core.auth.ext.HeaderAuthenticator</className>
		</realm -->
		
		<!-- For websphere -->
		<!-- realm name="WASLTPARealm" loginModule="WASLTPAModule">
      		<className>com.worklight.core.auth.ext.WebSphereFormBasedAuthenticator</className>
      		<parameter name="login-page" value="/login.html"/>
      		<parameter name="error-page" value="/loginError.html"/>
    	</realm -->
    	
    	<!-- For User Certificate Authentication -->
		<!-- realm name="wl_userCertificateAuthRealm" loginModule="WLUserCertificateLoginModule">
      		<className>com.worklight.core.auth.ext.UserCertificateAuthenticator</className>
      		<parameter name="dependent-user-auth-realm" value="WASLTPARealm" />
            <parameter name="pki-bridge-class" value="com.worklight.core.auth.ext.UserCertificateEmbeddedPKI" />
            <parameter name="embedded-pki-bridge-ca-p12-file-path" value="/opt/ssl_ca/ca.p12"/> 
            <parameter name="embedded-pki-bridge-ca-p12-password" value="capassword" />
    	</realm -->
    	
    	<!-- For Trusteer Fraud Detection -->
    	<!-- Requires acquiring Trusteer SDK --> 
		<!-- realm name="wl_basicTrusteerFraudDetectionRealm" loginModule="trusteerFraudDetectionLogin">
      		<className>com.worklight.core.auth.ext.TrusteerAuthenticator</className>
            <parameter name="rooted-device" value="block"/>
            <parameter name="device-with-malware" value="block"/>
            <parameter name="rooted-hiders" value="block"/>
            <parameter name="unsecured-wifi" value="alert"/>
            <parameter name="outdated-configuration" value="alert"/>
    	</realm -->
    	
	</realms>

	<loginModules>
		<loginModule expirationInSeconds="-1" name="StrongDummy">
			<className>com.worklight.core.auth.ext.NonValidatingLoginModule</className>
		</loginModule>
		
		<loginModule expirationInSeconds="-1" name="requireLogin">
			<className>com.worklight.core.auth.ext.SingleIdentityLoginModule</className>
		</loginModule>
		
		<loginModule expirationInSeconds="-1" name="rejectAll">
			<className>com.worklight.core.auth.ext.RejectingLoginModule</className>
		</loginModule>
		
		<loginModule expirationInSeconds="-1" name="AuthLoginModule">
			<className>com.worklight.core.auth.ext.NonValidatingLoginModule</className>
		</loginModule>
		
		<!-- Required for Trusteer - wl_basicTrusteerFraudDetectionRealm -->		
		<!-- loginModule name="trusteerFraudDetectionLogin">
			<className>com.worklight.core.auth.ext.TrusteerLoginModule</className>
		</loginModule-->
		
		<!-- For websphere -->
		<!-- loginModule name="WASLTPAModule">
      		<className>com.worklight.core.auth.ext.WebSphereLoginModule</className>
    	</loginModule -->
    	
    	<!-- Login module for User Certificate Authentication -->
    	<!-- <loginModule name="WLUserCertificateLoginModule">
			<className>com.worklight.core.auth.ext.UserCertificateLoginModule</className>
		</loginModule> -->
		
		
    	<!-- For enabling SSO with no-provisioning device authentication -->
    	<!-- <loginModule name="MySSO" ssoDeviceLoginModule="WLDeviceNoProvisioningLoginModule">
			<className>com.worklight.core.auth.ext.NonValidatingLoginModule</className>
		</loginModule> -->
		
		
    	<!-- For enabling SSO with auto-provisioning device authentication -->
    	<!-- <loginModule name="MySSO" ssoDeviceLoginModule="WLDeviceAutoProvisioningLoginModule">
			<className>com.worklight.core.auth.ext.NonValidatingLoginModule</className>
		</loginModule> -->
	</loginModules>

</tns:loginConfiguration>
